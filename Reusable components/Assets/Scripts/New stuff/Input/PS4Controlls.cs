//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.4.4
//     from Assets/Scripts/New stuff/Input/PS4Controlls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PS4Controlls : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PS4Controlls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PS4Controlls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""0e810495-d36b-4437-921c-4b78377d9db4"",
            ""actions"": [
                {
                    ""name"": ""HorizontalMovement"",
                    ""type"": ""Button"",
                    ""id"": ""78faf112-c2b9-4ed3-a491-eaa74feec7c1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Sprinting"",
                    ""type"": ""Button"",
                    ""id"": ""65678f81-e8e8-4b82-bf63-f286561b8180"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpTap"",
                    ""type"": ""Button"",
                    ""id"": ""bd650430-1826-4653-a895-07dafeb510dc"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""JumpHold"",
                    ""type"": ""Button"",
                    ""id"": ""abab8de7-536b-41be-9d99-903e0c0bca45"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""82d3dace-a205-4bab-8346-f2cea62d65b7"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Throw"",
                    ""type"": ""Button"",
                    ""id"": ""07241b22-cedb-4d78-ad07-778a20c7c55d"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f5eef6c8-b703-42f5-85d4-3a22c29efbe1"",
                    ""path"": ""<DualShockGamepad>/buttonWest"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""3efd72b4-7e90-4ae7-b3e1-292048a50c84"",
                    ""path"": ""<DualShockGamepad>/buttonEast"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Throw"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b8aadaa6-fba3-4d01-a4e6-39ff3dd18b8d"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpHold"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""01d88901-6596-4bbc-a607-3fb0a44a2329"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": ""Tap"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""JumpTap"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""HorizontalMovement"",
                    ""id"": ""5ef924c0-01d8-49d6-838e-4423e4fd3bea"",
                    ""path"": ""1DAxis"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""negative"",
                    ""id"": ""8d148b57-cfb7-4d46-bd16-37ac0f4dacec"",
                    ""path"": ""<DualShockGamepad>/leftStick/left"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""positive"",
                    ""id"": ""53404668-a438-40ac-b285-f17b372d9a81"",
                    ""path"": ""<DualShockGamepad>/leftStick/right"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""HorizontalMovement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""caf49436-deef-44cd-9836-06fca49d180b"",
                    ""path"": ""<DualShockGamepad>/rightTrigger"",
                    ""interactions"": ""Hold"",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprinting"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""ControllerDetection"",
            ""id"": ""01463d2a-24c5-4e10-935d-21706349d6be"",
            ""actions"": [
                {
                    ""name"": ""Detection"",
                    ""type"": ""Button"",
                    ""id"": ""d91cee3d-31dd-4d06-8ff1-94b8965e3298"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": ""Tap"",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""30da6860-cdba-45f1-8541-f5969028e04d"",
                    ""path"": ""<DualShockGamepad>/rightStick/"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Detection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""952f51cc-7eee-459d-85a8-ee796be5282f"",
                    ""path"": ""<DualShockGamepad>/leftStick"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Detection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0acdc964-1d33-485c-b124-d35d33551d07"",
                    ""path"": ""<DualShockGamepad>/buttonSouth"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Detection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2607b7d9-829c-4aaa-b53b-144faef59129"",
                    ""path"": ""<DualShockGamepad>/start"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Detection"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_HorizontalMovement = m_Player.FindAction("HorizontalMovement", throwIfNotFound: true);
        m_Player_Sprinting = m_Player.FindAction("Sprinting", throwIfNotFound: true);
        m_Player_JumpTap = m_Player.FindAction("JumpTap", throwIfNotFound: true);
        m_Player_JumpHold = m_Player.FindAction("JumpHold", throwIfNotFound: true);
        m_Player_Attack = m_Player.FindAction("Attack", throwIfNotFound: true);
        m_Player_Throw = m_Player.FindAction("Throw", throwIfNotFound: true);
        // ControllerDetection
        m_ControllerDetection = asset.FindActionMap("ControllerDetection", throwIfNotFound: true);
        m_ControllerDetection_Detection = m_ControllerDetection.FindAction("Detection", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private IPlayerActions m_PlayerActionsCallbackInterface;
    private readonly InputAction m_Player_HorizontalMovement;
    private readonly InputAction m_Player_Sprinting;
    private readonly InputAction m_Player_JumpTap;
    private readonly InputAction m_Player_JumpHold;
    private readonly InputAction m_Player_Attack;
    private readonly InputAction m_Player_Throw;
    public struct PlayerActions
    {
        private @PS4Controlls m_Wrapper;
        public PlayerActions(@PS4Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @HorizontalMovement => m_Wrapper.m_Player_HorizontalMovement;
        public InputAction @Sprinting => m_Wrapper.m_Player_Sprinting;
        public InputAction @JumpTap => m_Wrapper.m_Player_JumpTap;
        public InputAction @JumpHold => m_Wrapper.m_Player_JumpHold;
        public InputAction @Attack => m_Wrapper.m_Player_Attack;
        public InputAction @Throw => m_Wrapper.m_Player_Throw;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void SetCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterface != null)
            {
                @HorizontalMovement.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHorizontalMovement;
                @HorizontalMovement.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnHorizontalMovement;
                @Sprinting.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprinting;
                @Sprinting.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprinting;
                @Sprinting.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnSprinting;
                @JumpTap.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpTap;
                @JumpTap.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpTap;
                @JumpTap.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpTap;
                @JumpHold.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpHold;
                @JumpHold.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpHold;
                @JumpHold.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnJumpHold;
                @Attack.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Attack.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnAttack;
                @Throw.started -= m_Wrapper.m_PlayerActionsCallbackInterface.OnThrow;
                @Throw.performed -= m_Wrapper.m_PlayerActionsCallbackInterface.OnThrow;
                @Throw.canceled -= m_Wrapper.m_PlayerActionsCallbackInterface.OnThrow;
            }
            m_Wrapper.m_PlayerActionsCallbackInterface = instance;
            if (instance != null)
            {
                @HorizontalMovement.started += instance.OnHorizontalMovement;
                @HorizontalMovement.performed += instance.OnHorizontalMovement;
                @HorizontalMovement.canceled += instance.OnHorizontalMovement;
                @Sprinting.started += instance.OnSprinting;
                @Sprinting.performed += instance.OnSprinting;
                @Sprinting.canceled += instance.OnSprinting;
                @JumpTap.started += instance.OnJumpTap;
                @JumpTap.performed += instance.OnJumpTap;
                @JumpTap.canceled += instance.OnJumpTap;
                @JumpHold.started += instance.OnJumpHold;
                @JumpHold.performed += instance.OnJumpHold;
                @JumpHold.canceled += instance.OnJumpHold;
                @Attack.started += instance.OnAttack;
                @Attack.performed += instance.OnAttack;
                @Attack.canceled += instance.OnAttack;
                @Throw.started += instance.OnThrow;
                @Throw.performed += instance.OnThrow;
                @Throw.canceled += instance.OnThrow;
            }
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // ControllerDetection
    private readonly InputActionMap m_ControllerDetection;
    private IControllerDetectionActions m_ControllerDetectionActionsCallbackInterface;
    private readonly InputAction m_ControllerDetection_Detection;
    public struct ControllerDetectionActions
    {
        private @PS4Controlls m_Wrapper;
        public ControllerDetectionActions(@PS4Controlls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Detection => m_Wrapper.m_ControllerDetection_Detection;
        public InputActionMap Get() { return m_Wrapper.m_ControllerDetection; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(ControllerDetectionActions set) { return set.Get(); }
        public void SetCallbacks(IControllerDetectionActions instance)
        {
            if (m_Wrapper.m_ControllerDetectionActionsCallbackInterface != null)
            {
                @Detection.started -= m_Wrapper.m_ControllerDetectionActionsCallbackInterface.OnDetection;
                @Detection.performed -= m_Wrapper.m_ControllerDetectionActionsCallbackInterface.OnDetection;
                @Detection.canceled -= m_Wrapper.m_ControllerDetectionActionsCallbackInterface.OnDetection;
            }
            m_Wrapper.m_ControllerDetectionActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Detection.started += instance.OnDetection;
                @Detection.performed += instance.OnDetection;
                @Detection.canceled += instance.OnDetection;
            }
        }
    }
    public ControllerDetectionActions @ControllerDetection => new ControllerDetectionActions(this);
    public interface IPlayerActions
    {
        void OnHorizontalMovement(InputAction.CallbackContext context);
        void OnSprinting(InputAction.CallbackContext context);
        void OnJumpTap(InputAction.CallbackContext context);
        void OnJumpHold(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnThrow(InputAction.CallbackContext context);
    }
    public interface IControllerDetectionActions
    {
        void OnDetection(InputAction.CallbackContext context);
    }
}
